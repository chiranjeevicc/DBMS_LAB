-----------------------------------OREDER DTABASE -----------------------------------

CREATE DATABASE order_database;


CREATE TABLE SALESMAN 
(SALESMAN_ID INT, 
SNAME VARCHAR (30), 
CITY VARCHAR (30), 
COMMISSION VARCHAR (30), 
PRIMARY KEY (SALESMAN_ID));

SELECT *FROM salesman;

INSERT INTO SALESMAN VALUES (1000,'JOHN','BANGALORE','25 %'); 
INSERT INTO SALESMAN VALUES (2000,'RAVI','BANGALORE','20 %'); 
INSERT INTO SALESMAN VALUES (3000, 'KUMAR','MYSORE','15 %'); 
INSERT INTO SALESMAN VALUES (4000,'SMITH','DELHI','30 %'); 
INSERT INTO SALESMAN VALUES (5000, 'HARSHA','HYDRABAD','15 %'); 


CREATE TABLE CUSTOMER1 
(
CUSTOMER_ID INT, 
CUST_NAME VARCHAR(30), 
CITY VARCHAR(30), 
GRADE INT, 
SALESMAN_ID INT,
PRIMARY KEY (CUSTOMER_ID ),
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID)ON DELETE SET NULL);


SELECT *FROM customer1;

INSERT INTO CUSTOMER1 VALUES (10, 'PREETHI','BANGALORE', 100, 1000); 
INSERT INTO CUSTOMER1 VALUES (11, 'VIVEK','MANGALORE', 300, 1000); 
INSERT INTO CUSTOMER1 VALUES (12, 'BHASKAR','CHENNAI', 400, 2000); 
INSERT INTO CUSTOMER1 VALUES (13, 'CHETHAN','BANGALORE', 200, 2000); 
INSERT INTO CUSTOMER1 VALUES (14, 'MAMATHA','BANGALORE', 400, 3000); 


CREATE TABLE ORDERS 
(ORD_NO INT, 
PURCHASE_AMT INT, 
ORD_DATE DATE, 
CUSTOMER_ID INT,
SALESMAN_ID INT,
PRIMARY KEY (ORD_NO), 
FOREIGN KEY (CUSTOMER_ID)REFERENCES CUSTOMER1 (CUSTOMER_ID) ON DELETE CASCADE, 
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN (SALESMAN_ID) ON DELETE CASCADE);


SELECT *FROM orders;

INSERT INTO ORDERS VALUES (50, 5000,'2017-05-04', 10, 1000); 
INSERT INTO ORDERS VALUES (51, 450, '2017-01-20', 10, 2000);
INSERT INTO ORDERS VALUES (52, 1000, '2017-02-24', 13, 2000); 
INSERT INTO ORDERS VALUES (53, 3500, '2017-04-13', 14, 3000); 
INSERT INTO ORDERS VALUES (54, 550, '2017-03-09', 12, 2000);


//1. COUNT the customers WITH grades above Bangalore’s average. 

SELECT GRADE,COUNT(DISTINCT CUSTOMER_ID) 
FROM CUSTOMER1 
GROUP BY GRADE 
HAVING GRADE > (SELECT AVG(GRADE) 
		FROM CUSTOMER1 
		WHERE CITY='BANGALORE');
		
//2. Find the NAME AND numbers of ALL salesmen who had more THAN ONE customer. 

SELECT SALESMAN_ID,SNAME 
FROM SALESMAN A 
WHERE 1 <(SELECT COUNT(*) 
	  FROM CUSTOMER1 C
	  WHERE C.SALESMAN_ID=A.SALESMAN_ID);

//3. LIST ALL salesmen AND indicate those who have AND don’t have customers IN their cities (USE UNION operation.) 

SELECT S.SALESMAN_ID,S.SNAME,C.CUST_NAME,S.COMMISSION 
FROM SALESMAN S, CUSTOMER1 C 
WHERE S.CITY = C.CITY 
UNION 
SELECT SALESMAN_ID,SNAME, 'NO MATCH', COMMISSION 
FROM SALESMAN 
WHERE NOT CITY = ANY 
(SELECT CITY 
FROM CUSTOMER1) 
ORDER BY 2 DESC;

//4. CREATE a VIEW that finds the salesman who has the customer WITH the highest ORDER of a day. 

CREATE VIEW ELITSALESMAN AS 
SELECT O.ORD_DATE,S.SALESMAN_ID,S.SNAME 
FROM SALESMAN S, ORDERS O
WHERE S.SALESMAN_ID = O.SALESMAN_ID AND O.PURCHASE_AMT=(SELECT MAX(PURCHASE_AMT) 
							FROM ORDERS C 
							WHERE C.ORD_DATE = O.ORD_DATE);

SELECT *FROM ELITSALESMAN;

//5. Demonstrate the DELETE operation BY removing salesman WITH id 1000. ALL his orders must also be deleted. 
     USE ON DELETE CASCADE AT the END of FOREIGN KEY definitions WHILE creating child TABLE orders AND THEN EXECUTE the following: 
     USE ON DELETE SET NULL AT the END of FOREIGN KEY definitions WHILE creating child TABLE customers AND THEN executes the following: 

DELETE FROM SALESMAN 
WHERE SALESMAN_ID=1000;

SELECT *FROM SALESMAN;


--------------------------------BOOK_DATABASE-------------------------------

CREATE DATABASE BOOK_DATABASE;

USE BOOK_DATABASE;

CREATE TABLE PUBLISHER 
(
PNAME VARCHAR(20)PRIMARY KEY, 
PHONE  BIGINT (12), 
ADDRESS VARCHAR(30)
); 

DROP TABLE PUBLISHER;


INSERT INTO PUBLISHER VALUES ('MCGRAW-HILL',9989076587,'BANGALORE'); 
INSERT INTO PUBLISHER VALUES ('PEARSON', 9889076565, 'NEWDELHI'); 
INSERT INTO PUBLISHER VALUES ('RANDOM HOUSE', 7455679345,'HYDRABAD'); 
INSERT INTO PUBLISHER VALUES ('HACHETTE LIVRE', 8970862340,'CHENAI'); 
INSERT INTO PUBLISHER VALUES ('GRUPO PLANETA', 7756120238,'BANGALORE'); 




SELECT *FROM PUBLISHER;


CREATE TABLE BOOK 
(
BOOK_ID INT,
TITLE VARCHAR(30), 
PUB_YEAR VARCHAR(30), 
PNAME VARCHAR(30),
PRIMARY KEY(BOOK_ID),
FOREIGN KEY (PNAME) REFERENCES PUBLISHER (PNAME) ON DELETE CASCADE);



INSERT INTO BOOK VALUES (1,'DBMS','JAN-2017', 'MCGRAW-HILL'); 
INSERT INTO BOOK VALUES (2,'ADBMS','JUN-2016', 'MCGRAW-HILL'); 
INSERT INTO BOOK VALUES (3,'CN','SEP-2016', 'PEARSON'); 
INSERT INTO BOOK VALUES (4,'CG','SEP-2015','GRUPO PLANETA'); 
INSERT INTO BOOK VALUES (5,'OS','MAY-2016', 'PEARSON');


SELECT *FROM BOOK;

CREATE TABLE BOOK_AUTHORS 
(
AUTHOR_NAME VARCHAR(30), 
BOOK_ID INT, 
PRIMARY KEY (BOOK_ID, AUTHOR_NAME),
FOREIGN KEY (BOOK_ID)REFERENCES BOOK (BOOK_ID) ON DELETE CASCADE 
); 

INSERT INTO BOOK_AUTHORS VALUES ('NAVATHE', 1); 
INSERT INTO BOOK_AUTHORS VALUES ('NAVATHE', 2); 
INSERT INTO BOOK_AUTHORS VALUES ('TANENBAUM', 3); 
INSERT INTO BOOK_AUTHORS VALUES ('EDWARD ANGEL', 4); 
INSERT INTO BOOK_AUTHORS VALUES ('GALVIN', 5); 



SELECT *FROM BOOK_AUTHORS;

CREATE TABLE LIBRARY_BRANCH 
(
BRANCH_ID INT PRIMARY KEY, 
BRANCH_NAME VARCHAR(50), 
ADDRESS VARCHAR (50)); 

INSERT INTO LIBRARY_BRANCH VALUES (10,'RR NAGAR','BANGALORE'); 
INSERT INTO LIBRARY_BRANCH VALUES (11,'RNSIT','BANGALORE'); 
INSERT INTO LIBRARY_BRANCH VALUES (12,'RAJAJI NAGAR','BANGALORE'); 
INSERT INTO LIBRARY_BRANCH VALUES (13,'NITTE','MANGALORE'); 
INSERT INTO LIBRARY_BRANCH VALUES (14,'MANIPAL','UDUPI'); 



SELECT *FROM LIBRARY_BRANCH;

CREATE TABLE BOOK_COPIES 
(
NO_OF_COPIES INT, 
BOOK_ID INT,
BRANCH_ID INT,
PRIMARY KEY (BOOK_ID, BRANCH_ID),
FOREIGN KEY(BOOK_ID) REFERENCES BOOK (BOOK_ID) ON DELETE CASCADE, 
FOREIGN KEY (BRANCH_ID) REFERENCES LIBRARY_BRANCH (BRANCH_ID) ON DELETE CASCADE
); 

INSERT INTO BOOK_COPIES VALUES (10, 1, 10); 
INSERT INTO BOOK_COPIES VALUES (5, 1, 11); 
INSERT INTO BOOK_COPIES VALUES (2, 2, 12); 
INSERT INTO BOOK_COPIES VALUES (5, 2, 13); 
INSERT INTO BOOK_COPIES VALUES (7, 3, 14); 
INSERT INTO BOOK_COPIES VALUES (1, 5, 10); 
INSERT INTO BOOK_COPIES VALUES (3, 4, 11); 


SELECT *FROM BOOK_COPIES;

CREATE TABLE CARD 
(CARD_NO INT PRIMARY KEY); 

INSERT INTO CARD VALUES (100); 
INSERT INTO CARD VALUES (101); 
INSERT INTO CARD VALUES (102); 
INSERT INTO CARD VALUES (103); 
INSERT INTO CARD VALUES (104);


SELECT *FROM CARD;

CREATE TABLE BOOK_LENDING 
(
 DATE_OUT DATE, 
 DUE_DATE DATE, 
 BOOK_ID INT,
 BRANCH_ID INT,
 CARD_NO INT,
 PRIMARY KEY (BOOK_ID, BRANCH_ID, CARD_NO),
 FOREIGN KEY(BOOK_ID)REFERENCES BOOK (BOOK_ID) ON DELETE CASCADE, 
 FOREIGN KEY(BRANCH_ID)REFERENCES LIBRARY_BRANCH (BRANCH_ID) ON DELETE CASCADE, 
 FOREIGN KEY(CARD_NO) REFERENCES CARD (CARD_NO) ON DELETE CASCADE
);

INSERT INTO BOOK_LENDING VALUES ('2017-01-01','2017-01-01', 1, 10, 101); 
INSERT INTO BOOK_LENDING VALUES ('2017-01-11','2017-03-11', 3, 14, 101); 
INSERT INTO BOOK_LENDING VALUES ('2017-02-21','2017-04-21', 2, 13, 101); 
INSERT INTO BOOK_LENDING VALUES ('2017-03-15','2017-07-15', 4, 11, 101); 
INSERT INTO BOOK_LENDING VALUES ('2017-04-12','2017-05-12', 1, 11, 104); 


SELECT *FROM BOOK_LENDING;


//1. Retrieve details of ALL books IN the library – id, title, NAME of publisher, AUTHORS, number of copies IN EACH branch, etc. 

SELECT B.BOOK_ID, B.TITLE, B.PNAME, A.AUTHOR_NAME, C.NO_OF_COPIES, L.BRANCH_ID 
FROM BOOK B, BOOK_AUTHORS A, BOOK_COPIES C, LIBRARY_BRANCH L 
WHERE B.BOOK_ID=A.BOOK_ID AND B.BOOK_ID=C.BOOK_ID AND L.BRANCH_ID=C.BRANCH_ID;

//1. Get the particulars of borrowers who have borrowed more THAN 3 books, but FROM Jan 2017 TO Jun 2017. 

SELECT CARD_NO 
FROM BOOK_LENDING 
WHERE DATE_OUT BETWEEN '2017-01-01' AND '2017-07-01'
GROUP BY CARD_NO
HAVING COUNT(*)>3;

//2. DELETE a book IN BOOK table. UPDATE the contents of other TABLES TO reflect this DATA manipulation operation. 

DELETE FROM BOOK 
WHERE BOOK_ID=3;

SELECT *FROM BOOK;

//3. PARTITION the BOOK TABLE based ON YEAR of publication. Demonstrate its working WITH a SIMPLE query. 

CREATE VIEW V_PUBLICATION AS 
SELECT PUB_YEAR 
FROM BOOK;

SELECT *FROM V_PUBLICATION;

//4. CREATE a VIEW of ALL books AND its number of copies that are currently available IN the Library. 

CREATE VIEW V_BOOKS AS 
SELECT B.BOOK_ID, B.TITLE, C.NO_OF_COPIES 
FROM BOOK B, BOOK_COPIES C, LIBRARY_BRANCH L 
WHERE B.BOOK_ID=C.BOOK_ID AND C.BRANCH_ID=L.BRANCH_ID;

SELECT *FROM V_BOOKS; 

-----------------------------------STUDENT ENROLEMENT_DTABASE-----------------------------------

CREATE DATABASE STUD_ENROLMENT;

USE STUD_ENROLMENT;

     CREATE TABLE student
     (
     regno VARCHAR(15),
     Sname VARCHAR(20),
     major VARCHAR(20),
     bdate DATE,
     PRIMARY KEY (regno) 
     );
     
     INSERT INTO student (regno,Sname,major,bdate) VALUES
     ('1pe11cs001','a','sr','19930718'),
     ('1pe11cs002','b','sr','19930924'),
     ('1pe11cs003','c','sr','19931127'),
     ('1pe11cs004','d','sr','19930413'),
     ('1pe11cs005','e','jr','19940824');

 
 SELECT *FROM STUDENT;
 
 
CREATE TABLE course
(
     courseno INT,
     cname VARCHAR(20),
     dept VARCHAR(20),
     PRIMARY KEY (courseno) 
);

INSERT INTO course VALUES 
     (111,'OS','CSE'),
     (112,'EC','CSE'),
     (113,'SS','ISE'),
     (114,'DBMS','CSE'),
     (115,'SIGNALS','ECE');

 SELECT *FROM COURSE;

CREATE TABLE enroll
(
     regno VARCHAR(15),
     courseno INT,
     sem INT(3),
     marks INT(4),
     PRIMARY KEY (regno,courseno),
     FOREIGN KEY (regno) REFERENCES student (regno),
     FOREIGN KEY (courseno) REFERENCES course (courseno) );

INSERT INTO enroll VALUES 
     ('1pe11cs001',115,3,100),
     ('1pe11cs002',114,5,100),
     ('1pe11cs003',113,5,100),
     ('1pe11cs004',111,5,100),
     ('1pe11cs005',112,3,100);

 SELECT *FROM enroll;

CREATE TABLE TEXT
(
     book_isbn INT(5),
     book_title VARCHAR(20),
     publisher VARCHAR(20),
     author VARCHAR(20),
     PRIMARY KEY (book_isbn) 
     );
     
     INSERT INTO TEXT VALUES 
     (10,'DATABASE SYSTEMS','PEARSON','SCHIELD'),
     (900,'OPERATING SYS','PEARSON','LELAND'),
     (901,'CIRCUITS','HALL INDIA','BOB'),
     (902,'SYSTEM SOFTWARE','PETERSON','JACOB'),
     (903,'SCHEDULING','PEARSON','PATIL'),
     (904,'DATABASE SYSTEMS','PEARSON','JACOB'),
     (905,'DATABASE MANAGER','PEARSON','BOB'),
     (906,'SIGNALS','HALL INDIA','SUMIT');

 SELECT *FROM TEXT;

CREATE TABLE book_adoption
(
     courseno INT,
     sem INT(3),
     book_isbn INT(5),
     PRIMARY KEY (courseno,book_isbn),
     FOREIGN KEY (courseno) REFERENCES course (courseno),
     FOREIGN KEY (book_isbn) REFERENCES TEXT(book_isbn) 
     );
     
     INSERT INTO book_adoption VALUES
	(111,5,900),
	(111,5,903),
	(111,5,904),
	(112,3,901),
	(113,3,10),
	(114,5,905),
	(113,5,902),
	(115,3,906);


 SELECT *FROM book_adoption;
 
// 4. Produce a LIST of TEXT books (include Course #, Book-ISBN, Book-title) in the alphabetical
      ORDER FOR courses offered BY the 'CS' department that USE more THAN two books.
	

     SELECT c.courseno,t.book_isbn,t.book_title
     FROM course c,book_adoption ba,TEXT t
     WHERE c.courseno=ba.courseno
     AND ba.book_isbn=t.book_isbn
     AND c.dept='CSE'
     AND 2<(
     SELECT COUNT(book_isbn)
     FROM book_adoption b
     WHERE c.courseno=b.courseno)
     ORDER BY t.book_title;
     
     //5.	LIST ANY department that has ALL its adopted books published BY a SPECIFIC publisher.

     SELECT DISTINCT c.dept
     FROM course c
     WHERE c.dept IN( SELECT c.dept
		     FROM course c,book_adoption b,TEXT t
		     WHERE c.courseno=b.courseno AND t.book_isbn=b.book_isbn AND t.publisher='PEARSON')
		          AND c.dept NOT IN(SELECT c.dept
					    FROM course c,book_adoption b,TEXT t
					    WHERE c.courseno=b.courseno AND t.book_isbn=b.book_isbn
					     AND t.publisher != 'PEARSON');
     
     

---------------------------------------DATABASE_OF_MOVIE-------------------------------------------------

CREATE DATABASE MOOVIE;

USE MOOVIE;

CREATE TABLE ACTOR 
( 
ACT_ID INT, 
ACT_NAME VARCHAR(30), 
ACT_GENDER CHAR (1), 
PRIMARY KEY (ACT_ID)
); 

INSERT INTO ACTOR VALUES (301,'ANUSHKA','F'); 
INSERT INTO ACTOR VALUES (302,'PRABHAS','M'); 
INSERT INTO ACTOR VALUES (303,'PUNITH','M'); 
INSERT INTO ACTOR VALUES (304,'JERMY','M'); 

SELECT *FROM ACTOR;

CREATE TABLE DIRECTOR 
( 
DIR_ID INT, 
DIR_NAME VARCHAR (20), 
DIR_PHONE BIGINT, 
PRIMARY KEY (DIR_ID)
); 

INSERT INTO DIRECTOR VALUES (60,'RAJAMOULI', 8751611001); 
INSERT INTO DIRECTOR VALUES (61,'HITCHCOCK', 7766138911); 
INSERT INTO DIRECTOR VALUES (62,'FARAN', 9986776531); 
INSERT INTO DIRECTOR VALUES (63,'STEVEN SPIELBERG', 8989776530); 

SELECT *FROM DIRECTOR;

CREATE TABLE MOVIES 
( 
MOV_ID INT, 
MOV_TITLE VARCHAR (25), 
MOV_YEAR INT, 
MOV_LANG VARCHAR (12), 
DIR_ID INT, 
PRIMARY KEY (MOV_ID), 
FOREIGN KEY (DIR_ID) REFERENCES DIRECTOR (DIR_ID)
);

INSERT INTO MOVIES VALUES (1001,'BAHUBALI-2', 2017,'TELAGU', 60); 
INSERT INTO MOVIES VALUES (1002,'BAHUBALI-1', 2015, 'TELAGU', 60); 
INSERT INTO MOVIES VALUES (1003,'AKASH',2008,'KANNADA', 61); 
INSERT INTO MOVIES VALUES (1004,'WAR HORSE', 2011,'ENGLISH', 63); 

SELECT *FROM MOVIES;

CREATE TABLE MOVIE_CAST 
( 
ACT_ID INT, 
MOV_ID INT, 
ROLE VARCHAR (10), 
PRIMARY KEY (ACT_ID, MOV_ID), 
FOREIGN KEY (ACT_ID) REFERENCES ACTOR (ACT_ID), 
FOREIGN KEY (MOV_ID) REFERENCES MOVIES (MOV_ID)
); 

INSERT INTO MOVIE_CAST VALUES (301, 1002,'HEROINE'); 
INSERT INTO MOVIE_CAST VALUES (301, 1001,'HEROINE'); 
INSERT INTO MOVIE_CAST VALUES (303, 1003,'HERO'); 
INSERT INTO MOVIE_CAST VALUES (303, 1002,'GUEST'); 
INSERT INTO MOVIE_CAST VALUES (304, 1004,'HERO'); 


CREATE TABLE RATING 
( 
MOV_ID INT, 
REV_STARS VARCHAR (25), 
PRIMARY KEY (MOV_ID), 
FOREIGN KEY (MOV_ID) REFERENCES MOVIES (MOV_ID)
);

INSERT INTO RATING VALUES (1001, 4); 
INSERT INTO RATING VALUES (1002, 2);
INSERT INTO RATING VALUES (1003, 5); 
INSERT INTO RATING VALUES (1004, 4);



//1. LIST the titles of ALL movies directed BY ‘Hitchcock’. 

SELECT MOV_TITLE 
FROM MOVIES 
WHERE DIR_ID IN (SELECT DIR_ID 
		 FROM DIRECTOR 
		WHERE DIR_NAME ='HITCHCOCK');

//2. Find the movie NAMES WHERE ONE OR more actors acted IN two OR more movies. 

SELECT MOV_TITLE 
FROM MOVIES M, MOVIE_CAST MV 
WHERE M.MOV_ID=MV.MOV_ID AND ACT_ID IN (SELECT ACT_ID 
					FROM MOVIE_CAST 
					GROUP BY ACT_ID 
					HAVING COUNT(ACT_ID)>1) 
					GROUP BY MOV_TITLE 
					HAVING COUNT(*)>1;
//3. LIST ALL actors who acted IN a movie BEFORE 2000 AND also IN a movie AFTER 2015 (USE JOIN operation). 

SELECT ACT_NAME, MOV_TITLE, MOV_YEAR
FROM ACTOR A 
JOIN MOVIE_CAST C 
ON A.ACT_ID=C.ACT_ID 
JOIN MOVIES M 
ON C.MOV_ID=M.MOV_ID 
WHERE M.MOV_YEAR NOT BETWEEN 2000 AND 2015;


//4. Find the title of movies AND number of stars FOR EACH movie that has AT LEAST ONE rating AND find 
the highest number of stars that movie received. Sort the result BY movie title. 

SELECT MOV_TITLE, MAX(REV_STARS) 
FROM MOVIES 
INNER JOIN RATING USING (MOV_ID) 
GROUP BY MOV_TITLE 
HAVING MAX(REV_STARS)>0 
ORDER BY MOV_TITLE;

//6.	UPDATE rating of ALL movies directed BY ‘Steven Spielberg’ TO 5 KL 

UPDATE RATING 
SET REV_STARS=5 
WHERE MOV_ID IN (SELECT MOV_ID FROM MOVIES 
WHERE DIR_ID IN (SELECT DIR_ID FROM DIRECTOR 
WHERE DIR_NAME ='STEVEN SPIELBERG'));

SELECT *FROM RATING;


---------------------------------DATABASE_COLLEGE------------------------------------------------------------------

CREATE DATABASE COLLEGE_DATABASE;

USE COLLEGE_DATABASE;

CREATE TABLE STUDENT 
( 
USN VARCHAR (10) PRIMARY KEY, 
SNAME VARCHAR (25), 
ADDRESS VARCHAR (25), 
PHONE BIGINT, 
GENDER CHAR (1)
); 

INSERT INTO STUDENT VALUES ('1RN13CS020','AKSHAY','BELAGAVI', 8877881122,'M'); 
INSERT INTO STUDENT VALUES ('1RN13CS062','SANDHYA','BENGALURU', 7722829912,'F'); 
INSERT INTO STUDENT VALUES ('1RN13CS091','TEESHA','BENGALURU', 7712312312,'F'); 
INSERT INTO STUDENT VALUES ('1RN13CS066','SUPRIYA','MANGALURU', 8877881122,'F'); 
INSERT INTO STUDENT VALUES ('1RN14CS010','ABHAY','BENGALURU', 9900211201,'M'); 
INSERT INTO STUDENT VALUES ('1RN14CS032','BHASKAR','BENGALURU', 9923211099,'M'); 
INSERT INTO STUDENT VALUES ('1RN14CS025','ASMI','BENGALURU', 7894737377,'F'); 
INSERT INTO STUDENT VALUES ('1RN15CS011','AJAY','TUMKUR', 9845091341,'M');
INSERT INTO STUDENT VALUES ('1RN15CS029','CHITRA','DAVANGERE', 7696772121,'F'); 
INSERT INTO STUDENT VALUES ('1RN15CS045','JEEVA','BELLARY', 9944850121,'M'); 
INSERT INTO STUDENT VALUES ('1RN15CS091','SANTOSH','MANGALURU', 8812332201,'M'); 
INSERT INTO STUDENT VALUES ('1RN16CS045','ISMAIL','KALBURGI', 9900232201,'M'); 
INSERT INTO STUDENT VALUES ('1RN16CS088','SAMEERA','SHIMOGA', 9905542212,'F'); 
INSERT INTO STUDENT VALUES ('1RN16CS122','VINAYAKA','CHIKAMAGALUR', 8800880011,'M'); 

SELECT *FROM STUDENT;


CREATE TABLE SEMSEC 
( 
SSID VARCHAR (5) PRIMARY KEY, 
SEM INT, 
SEC CHAR (1)
); 

INSERT INTO SEMSEC VALUES ('CSE8A', 8,'A'); 
INSERT INTO SEMSEC VALUES ('CSE8B', 8,'B'); 
INSERT INTO SEMSEC VALUES ('CSE8C', 8,'C'); 
INSERT INTO SEMSEC VALUES ('CSE7A', 7,'A'); 
INSERT INTO SEMSEC VALUES ('CSE7B', 7,'B'); 
INSERT INTO SEMSEC VALUES ('CSE7C', 7,'C'); 
INSERT INTO SEMSEC VALUES ('CSE6A', 6,'A'); 
INSERT INTO SEMSEC VALUES ('CSE6B', 6,'B'); 
INSERT INTO SEMSEC VALUES ('CSE6C', 6,'C'); 
INSERT INTO SEMSEC VALUES ('CSE5A', 5,'A'); 
INSERT INTO SEMSEC VALUES ('CSE5B', 5,'B'); 
INSERT INTO SEMSEC VALUES ('CSE5C', 5,'C'); 
INSERT INTO SEMSEC VALUES ('CSE4A', 4,'A'); 
INSERT INTO SEMSEC VALUES ('CSE4B', 4,'B'); 
INSERT INTO SEMSEC VALUES ('CSE4C', 4,'C'); 
INSERT INTO SEMSEC VALUES ('CSE3A', 3,'A'); 
INSERT INTO SEMSEC VALUES ('CSE3B', 3,'B'); 
INSERT INTO SEMSEC VALUES ('CSE3C', 3,'C'); 
INSERT INTO SEMSEC VALUES ('CSE2A', 2,'A'); 
INSERT INTO SEMSEC VALUES ('CSE2B', 2,'B'); 
INSERT INTO SEMSEC VALUES ('CSE2C', 2,'C'); 
INSERT INTO SEMSEC VALUES ('CSE1A',1,'A');
INSERT INTO SEMSEC VALUES ('CSE1B', 1,'B'); 
INSERT INTO SEMSEC VALUES ('CSE1C', 1,'C'); 

SELECT *FROM SEMSEC;

CREATE TABLE CLASS 
( 
USN VARCHAR (10), 
SSID VARCHAR (5), 
PRIMARY KEY (USN, SSID), 
FOREIGN KEY (USN) REFERENCES STUDENT (USN), 
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID)
);

INSERT INTO CLASS VALUES ('1RN13CS020','CSE8A'); 
INSERT INTO CLASS VALUES ('1RN13CS062','CSE8A'); 
INSERT INTO CLASS VALUES ('1RN13CS066','CSE8B'); 
INSERT INTO CLASS VALUES ('1RN13CS091','CSE8C'); 
INSERT INTO CLASS VALUES ('1RN14CS010','CSE7A'); 
INSERT INTO CLASS VALUES ('1RN14CS025','CSE7A'); 
INSERT INTO CLASS VALUES ('1RN14CS032','CSE7A'); 
INSERT INTO CLASS VALUES ('1RN15CS011','CSE4A'); 
INSERT INTO CLASS VALUES ('1RN15CS029','CSE4A'); 
INSERT INTO CLASS VALUES ('1RN15CS045','CSE4B'); 
INSERT INTO CLASS VALUES ('1RN15CS091','CSE4C'); 
INSERT INTO CLASS VALUES ('1RN16CS045','CSE3A'); 
INSERT INTO CLASS VALUES ('1RN16CS088','CSE3B'; 
INSERT INTO CLASS VALUES ('1RN16CS122','CSE3C'); 

SELECT *FROM CLASS;

CREATE TABLE SUBJECT 
( 
SUBCODE VARCHAR (8), 
TITLE VARCHAR (20), 
SEM INT, 
CREDITS INT, 
PRIMARY KEY (SUBCODE)
); 

INSERT INTO SUBJECT VALUES ('10CS81','ACA', 8, 4); 
INSERT INTO SUBJECT VALUES ('10CS82','SSM', 8, 4); 
INSERT INTO SUBJECT VALUES ('10CS83','NM', 8, 4); 
INSERT INTO SUBJECT VALUES ('10CS84','CC', 8, 4); 
INSERT INTO SUBJECT VALUES ('10CS85','PW', 8, 4); 
INSERT INTO SUBJECT VALUES ('10CS71','OOAD', 7, 4); 
INSERT INTO SUBJECT VALUES ('10CS72','ECS', 7, 4); 
INSERT INTO SUBJECT VALUES ('10CS73','PTW', 7, 4); 
INSERT INTO SUBJECT VALUES ('10CS74','DWDM', 7, 4); 
INSERT INTO SUBJECT VALUES ('10CS75','JAVA', 7, 4); 
INSERT INTO SUBJECT VALUES ('10CS76','SAN', 7, 4); 
INSERT INTO SUBJECT VALUES ('15CS51', 'ME', 5, 4); 
INSERT INTO SUBJECT VALUES ('15CS52','CN', 5, 4); 
INSERT INTO SUBJECT VALUES ('15CS53','DBMS', 5, 4); 
INSERT INTO SUBJECT VALUES ('15CS54','ATC', 5, 4); 
INSERT INTO SUBJECT VALUES ('15CS55','JAVA', 5, 3); 
INSERT INTO SUBJECT VALUES ('15CS56','AI', 5, 3);
INSERT INTO SUBJECT VALUES ('15CS41','M4', 4, 4); 
INSERT INTO SUBJECT VALUES ('15CS42','SE', 4, 4); 
INSERT INTO SUBJECT VALUES ('15CS43','DAA', 4, 4); 
INSERT INTO SUBJECT VALUES ('15CS44','MPMC', 4, 4); 
INSERT INTO SUBJECT VALUES ('15CS45','OOC', 4, 3); 
INSERT INTO SUBJECT VALUES ('15CS46','DC', 4, 3); 
INSERT INTO SUBJECT VALUES ('15CS31','M3', 3, 4); 
INSERT INTO SUBJECT VALUES ('15CS32','ADE', 3, 4); 
INSERT INTO SUBJECT VALUES ('15CS33','DSA', 3, 4); 
INSERT INTO SUBJECT VALUES ('15CS34','CO', 3, 4); 
INSERT INTO SUBJECT VALUES ('15CS35','USP', 3, 3); 
INSERT INTO SUBJECT VALUES ('15CS36','DMS', 3, 3); 

SELECT *FROM SUBJECT;

CREATE TABLE IAMARKS 
( 
USN VARCHAR (10), 
SUBCODE VARCHAR (8), 
SSID VARCHAR (5), 
TEST1 INT, 
TEST2 INT, 
TEST3 INT, 
FINALIA INT, 
PRIMARY KEY (USN, SUBCODE, SSID), 
FOREIGN KEY (USN) REFERENCES STUDENT (USN), 
FOREIGN KEY (SUBCODE) REFERENCES SUBJECT (SUBCODE), 
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID)
);

INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES ('1RN13CS091','10CS81','CSE8C', 15, 16, 18); 
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES ('1RN13CS091','10CS82','CSE8C', 12, 19, 14); 
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES ('1RN13CS091','10CS83','CSE8C', 19, 15, 20); 
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES ('1RN13CS091','10CS84','CSE8C', 20, 16, 19); 
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES ('1RN13CS091','10CS85','CSE8C', 15, 15, 12);

SELECT *FROM IAMARKS;


//1. LIST ALL the student details studying IN fourth semester ‘C’ section. 

SELECT S.*, SS.SEM, SS.SEC 
FROM STUDENT S, SEMSEC SS, CLASS C 
WHERE S.USN = C.USN AND SS.SSID = C.SSID AND SS.SEM = 4 AND SS.SEc='C';

//2. Compute the total number of male AND female students IN EACH semester AND IN EACH section. 

SELECT SS.SEM,SS.SEC,S.GENDER, COUNT(S.GENDER) AS COUNT 
FROM STUDENT S,SEMSEC SS,CLASS C 
WHERE S.USN = C.USN AND SS.SSID = C.SSID 
GROUP BY SS.SEM, SS.SEC, S.GENDER 
ORDER BY SEM;


//2. Compute the total number of male AND female students IN EACH semester AND IN EACH section. 

SELECT SS.SEM,SS.SEC,S.GENDER, COUNT(S.GENDER) AS COUNT 
FROM STUDENT S, SEMSEC SS, CLASS C 
WHERE S.USN = C.USN AND SS.SSID = C.SSID 
GROUP BY SS.SEM, SS.SEC, S.GENDER 
ORDER BY SEM;


//5. Categorize students based ON the following criterion: 
IF FinalIA = 17 TO 20 THEN CAT = ‘Outstanding’ 
IF FinalIA = 12 TO 16 THEN CAT = ‘Average’ 
IF FinalIA< 12 THEN CAT = ‘Weak’ 
Give these details only FOR 8th semester A, B, AND C section students. 

SELECT S.USN,S.SNAME,S.ADDRESS,S.PHONE,S.GENDER, 
(CASE WHEN IA.FINALIA BETWEEN 17 AND 20 THEN 'OUTSTANDING' 
WHEN IA.FINALIA BETWEEN 12 AND 16 THEN 'AVERAGE' 
ELSE 'WEAK' 
END) AS CAT 
FROM STUDENT S, SEMSEC SS, IAMARKS IA, SUBJECT SUB 
WHERE S.USN = IA.USN AND 
SS.SSID = IA.SSID AND 
SUB.SUBCODE = IA.SUBCODE AND 
SUB.SEM = 8;

